pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = 'your-docker-registry-url'
        K8S_NAMESPACE = 'your-kubernetes-namespace'
        K8S_DEPLOYMENT_NAME = 'your-kubernetes-deployment-name'
        K8S_SERVICE_NAME = 'your-kubernetes-service-name'
        K8S_CONFIGMAP_NAME = 'your-kubernetes-configmap-name'
        K8S_SECRET_NAME = 'your-kubernetes-secret-name'
    }
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-repo/your-node-app.git'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_REGISTRY}/your-node-app .'
                sh 'docker push ${DOCKER_REGISTRY}/your-node-app'
            }
        }
        stage('Create ConfigMap') {
            steps {
                sh 'kubectl create configmap ${K8S_CONFIGMAP_NAME} --from-file=configmap.yml'
            }
        }
        stage('Create Secret') {
            steps {
                sh 'kubectl create secret generic ${K8S_SECRET_NAME} --from-file=secret.yml'
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_DEPLOYMENT_NAME}=${DOCKER_REGISTRY}/your-node-app
                    kubectl apply -f kubernetes/service.yml -n ${K8S_NAMESPACE}
                '''
            }
        }
        stage('Check Deployment Status') {
            steps {
                sh 'kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} -n ${K8S_NAMESPACE}'
            }
        }
        stage('Test Deployment') {
            steps {
                sh 'curl -s -o /dev/null http://$(minikube ip):$(kubectl get service/${K8S_SERVICE_NAME} -n ${K8S_NAMESPACE} -o=jsonpath="{.spec.ports[0].nodePort}")'
            }
        }
    }
}

----

pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-repo/your-node-app.git'
            }
        }
        stage('Build') {
            steps {
                sh 'npm install'
            }
        }
        stage('Package') {
            steps {
                sh 'npm run build'
            }
        }
        stage('Deploy') {
            steps {
                script {
                    def dockerImage = docker.build("your-node-app")
                    docker.withRegistry('https://your-registry-url', 'your-registry-credentials-id') {
                        dockerImage.push()
                    }
                }
            }
        }
    }
}

